// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAspCore.Data.Context;

namespace WebAspCore.Data.Migrations
{
    [DbContext(typeof(WebDbContext))]
    partial class WebDbConrtextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("a3920a37-76fd-4fa3-8fad-2521a75d72a4"),
                            RoleId = new Guid("af3db7ba-c472-48a1-82bd-1a491e7a03ff")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.Advertistment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("PositionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.ToTable("Advertistments");
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.AdvertistmentPage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AdvertistmentPages");

                    b.HasData(
                        new
                        {
                            Id = "home",
                            Name = "Trang chủ"
                        },
                        new
                        {
                            Id = "product-cate",
                            Name = "Danh mục sản phẩm"
                        },
                        new
                        {
                            Id = "product-detail",
                            Name = "Chi tiết sản phẩm"
                        });
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.AdvertistmentPosition", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("PageId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.ToTable("AdvertistmentPositions");

                    b.HasData(
                        new
                        {
                            Id = "product-detail-left",
                            Name = "Bên trái",
                            PageId = "product-detail"
                        },
                        new
                        {
                            Id = "product-cate-left",
                            Name = "Bên trái",
                            PageId = "product-cate"
                        },
                        new
                        {
                            Id = "home-left",
                            Name = "Bên trái",
                            PageId = "home"
                        });
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.Announcement", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.AnnouncementUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AnnouncementId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("HasRead")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.ToTable("AnnouncementUsers");
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppRole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("af3db7ba-c472-48a1-82bd-1a491e7a03ff"),
                            ConcurrencyStamp = "d2dab739-ead8-4178-a3ef-30b75821d05e",
                            Description = "Top manager",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("b0010a0f-c60a-496b-81f6-b7adefe6b35e"),
                            ConcurrencyStamp = "d69f73fa-771c-4c34-84d7-f114cd71c7fd",
                            Description = "Staff",
                            Name = "Staff",
                            NormalizedName = "Staff"
                        },
                        new
                        {
                            Id = new Guid("e5022ae8-b308-4e26-8b60-3189bd021964"),
                            ConcurrencyStamp = "385089bc-66c5-4b83-bce1-3fd7254eda96",
                            Description = "Customer",
                            Name = "Customer",
                            NormalizedName = "Customer"
                        });
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppUser");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a3920a37-76fd-4fa3-8fad-2521a75d72a4"),
                            AccessFailedCount = 0,
                            Balance = 0m,
                            ConcurrencyStamp = "60bb46f6-03fc-49a3-88c4-b7b72af89aea",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dan@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "dandan@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEHl3W88V81Kfp+o6bUm8b4OXc0hzeK6v+AoMj2Hat9fvyLkFcRX4GtbtOSjB8HY+TA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BillStatus")
                        .HasColumnType("int");

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("CustomerMobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.BillDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BillId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("BillDetails");
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool?>("HomeFlag")
                        .HasColumnType("bit");

                    b.Property<bool?>("HotFlag")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("SeoAlias")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("SeoDescription")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("SeoKeywords")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("SeoPageTitle")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.BlogTag", b =>
                {
                    b.Property<int>("BlogId")
                        .HasColumnType("int")
                        .HasMaxLength(250);

                    b.Property<string>("TagId")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.HasKey("BlogId");

                    b.HasIndex("TagId");

                    b.ToTable("BlogTags");
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "#000000",
                            Name = "Đen"
                        },
                        new
                        {
                            Id = 2,
                            Code = "#FFFFFF",
                            Name = "Trắng"
                        },
                        new
                        {
                            Id = 3,
                            Code = "#ff0000",
                            Name = "Đỏ"
                        },
                        new
                        {
                            Id = 4,
                            Code = "#1000ff",
                            Name = "Xanh"
                        });
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.Contact", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<double?>("Lat")
                        .HasColumnType("float");

                    b.Property<double?>("Lng")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Other")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("ContactDetails");
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.Feedback", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.Footer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR(250)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Footers");
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.Function", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR(128)");

                    b.Property<string>("IconCss")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Functions");

                    b.HasData(
                        new
                        {
                            Id = "SYSTEM",
                            IconCss = "fa-desktop",
                            Name = "Hệ thống",
                            SortOrder = 1,
                            Status = 1,
                            URL = "/"
                        },
                        new
                        {
                            Id = "ROLE",
                            IconCss = "fa-home",
                            Name = "Nhóm",
                            ParentId = "SYSTEM",
                            SortOrder = 1,
                            Status = 1,
                            URL = "/admin/role/index"
                        },
                        new
                        {
                            Id = "FUNCTION",
                            IconCss = "fa-home",
                            Name = "Chức năng",
                            ParentId = "SYSTEM",
                            SortOrder = 2,
                            Status = 1,
                            URL = "/admin/function/index"
                        },
                        new
                        {
                            Id = "USER",
                            IconCss = "fa-home",
                            Name = "Người dùng",
                            ParentId = "SYSTEM",
                            SortOrder = 3,
                            Status = 1,
                            URL = "/admin/user/index"
                        },
                        new
                        {
                            Id = "ACTIVITY",
                            IconCss = "fa-home",
                            Name = "Nhật ký",
                            ParentId = "SYSTEM",
                            SortOrder = 4,
                            Status = 1,
                            URL = "/admin/activity/index"
                        },
                        new
                        {
                            Id = "ERROR",
                            IconCss = "fa-home",
                            Name = "Lỗi",
                            ParentId = "SYSTEM",
                            SortOrder = 5,
                            Status = 1,
                            URL = "/admin/error/index"
                        },
                        new
                        {
                            Id = "SETTING",
                            IconCss = "fa-home",
                            Name = "Cấu hình",
                            ParentId = "SYSTEM",
                            SortOrder = 6,
                            Status = 1,
                            URL = "/admin/setting/index"
                        },
                        new
                        {
                            Id = "PRODUCT",
                            IconCss = "fa-chevron-down",
                            Name = "Sản phẩm",
                            SortOrder = 2,
                            Status = 1,
                            URL = "/"
                        },
                        new
                        {
                            Id = "PRODUCT_CATEGORY",
                            IconCss = "fa-chevron-down",
                            Name = "Danh mục",
                            ParentId = "PRODUCT",
                            SortOrder = 1,
                            Status = 1,
                            URL = "/admin/productcategory/index"
                        },
                        new
                        {
                            Id = "PRODUCT_LIST",
                            IconCss = "fa-chevron-down",
                            Name = "Sản phẩm",
                            ParentId = "PRODUCT",
                            SortOrder = 2,
                            Status = 1,
                            URL = "/admin/product/index"
                        },
                        new
                        {
                            Id = "BILL",
                            IconCss = "fa-chevron-down",
                            Name = "Hóa đơn",
                            ParentId = "PRODUCT",
                            SortOrder = 3,
                            Status = 1,
                            URL = "/admin/bill/index"
                        },
                        new
                        {
                            Id = "CONTENT",
                            IconCss = "fa-table",
                            Name = "Nội dung",
                            SortOrder = 3,
                            Status = 1,
                            URL = "/"
                        },
                        new
                        {
                            Id = "BLOG",
                            IconCss = "fa-table",
                            Name = "Bài viết",
                            ParentId = "CONTENT",
                            SortOrder = 1,
                            Status = 1,
                            URL = "/admin/blog/index"
                        },
                        new
                        {
                            Id = "UTILITY",
                            IconCss = "fa-clone",
                            Name = "Tiện ích",
                            SortOrder = 4,
                            Status = 1,
                            URL = "/"
                        },
                        new
                        {
                            Id = "FOOTER",
                            IconCss = "fa-clone",
                            Name = "Footer",
                            ParentId = "UTILITY",
                            SortOrder = 1,
                            Status = 1,
                            URL = "/admin/footer/index"
                        },
                        new
                        {
                            Id = "FEEDBACK",
                            IconCss = "fa-clone",
                            Name = "Phản hồi",
                            ParentId = "UTILITY",
                            SortOrder = 2,
                            Status = 1,
                            URL = "/admin/feedback/index"
                        },
                        new
                        {
                            Id = "ANNOUNCEMENT",
                            IconCss = "fa-clone",
                            Name = "Thông báo",
                            ParentId = "UTILITY",
                            SortOrder = 3,
                            Status = 1,
                            URL = "/admin/announcement/index"
                        },
                        new
                        {
                            Id = "CONTACT",
                            IconCss = "fa-clone",
                            Name = "Liên hệ",
                            ParentId = "UTILITY",
                            SortOrder = 4,
                            Status = 1,
                            URL = "/admin/contact/index"
                        },
                        new
                        {
                            Id = "SLIDE",
                            IconCss = "fa-clone",
                            Name = "Slide",
                            ParentId = "UTILITY",
                            SortOrder = 5,
                            Status = 1,
                            URL = "/admin/slide/index"
                        },
                        new
                        {
                            Id = "ADVERTISMENT",
                            IconCss = "fa-clone",
                            Name = "Quảng cáo",
                            ParentId = "UTILITY",
                            SortOrder = 6,
                            Status = 1,
                            URL = "/admin/advertistment/index"
                        },
                        new
                        {
                            Id = "REPORT",
                            IconCss = "fa-bar-chart-o",
                            Name = "Báo cáo",
                            SortOrder = 5,
                            Status = 1,
                            URL = "/"
                        },
                        new
                        {
                            Id = "REVENUES",
                            IconCss = "fa-bar-chart-o",
                            Name = "Báo cáo doanh thu",
                            ParentId = "REPORT",
                            SortOrder = 1,
                            Status = 1,
                            URL = "/admin/report/revenues"
                        },
                        new
                        {
                            Id = "ACCESS",
                            IconCss = "fa-bar-chart-o",
                            Name = "Báo cáo truy cập",
                            ParentId = "REPORT",
                            SortOrder = 2,
                            Status = 1,
                            URL = "/admin/report/visitor"
                        },
                        new
                        {
                            Id = "READER",
                            IconCss = "fa-bar-chart-o",
                            Name = "Báo cáo độc giả",
                            ParentId = "REPORT",
                            SortOrder = 3,
                            Status = 1,
                            URL = "/admin/report/reader"
                        });
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.Language", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Resources")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.MakeIn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CheckMenu")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MakeIns");
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.Page", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanCreate")
                        .HasColumnType("bit");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("CanRead")
                        .HasColumnType("bit");

                    b.Property<bool>("CanUpdate")
                        .HasColumnType("bit");

                    b.Property<string>("FunctionId")
                        .IsRequired()
                        .HasColumnType("VARCHAR(128)")
                        .HasMaxLength(128);

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FunctionId");

                    b.HasIndex("RoleId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool?>("HomeFlag")
                        .HasColumnType("bit");

                    b.Property<bool?>("HotFlag")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("MakeInId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PromotionPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SeoAlias")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SeoDescription")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SeoKeywords")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SeoPageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            MakeInId = 0,
                            Name = "Sản phẩm 6",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-6",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            MakeInId = 0,
                            Name = "Sản phẩm 7",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-7",
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            MakeInId = 0,
                            Name = "Sản phẩm 8",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-8",
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            MakeInId = 0,
                            Name = "Sản phẩm 9",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-9",
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            MakeInId = 0,
                            Name = "Sản phẩm 10",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-10",
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            MakeInId = 0,
                            Name = "Sản phẩm 11",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-11",
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            MakeInId = 0,
                            Name = "Sản phẩm 12",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-12",
                            Status = 1
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            MakeInId = 0,
                            Name = "Sản phẩm 13",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-13",
                            Status = 1
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            MakeInId = 0,
                            Name = "Sản phẩm 14",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-14",
                            Status = 1
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            MakeInId = 0,
                            Name = "Sản phẩm 15",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-15",
                            Status = 1
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 4,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            MakeInId = 0,
                            Name = "Sản phẩm 16",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-16",
                            Status = 1
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 4,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            MakeInId = 0,
                            Name = "Sản phẩm 17",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-17",
                            Status = 1
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 4,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            MakeInId = 0,
                            Name = "Sản phẩm 18",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-18",
                            Status = 1
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 4,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            MakeInId = 0,
                            Name = "Sản phẩm 19",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-19",
                            Status = 1
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 4,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            MakeInId = 0,
                            Name = "Sản phẩm 20",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-20",
                            Status = 1
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            MakeInId = 0,
                            Name = "Sản phẩm 1",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-1",
                            Status = 1
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            MakeInId = 0,
                            Name = "Sản phẩm 2",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-2",
                            Status = 1
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            MakeInId = 0,
                            Name = "Sản phẩm 3",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-3",
                            Status = 1
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            MakeInId = 0,
                            Name = "Sản phẩm 4",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-4",
                            Status = 1
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            MakeInId = 0,
                            Name = "Sản phẩm 5",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-5",
                            Status = 1
                        });
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HomeFlag")
                        .HasColumnType("bit");

                    b.Property<int?>("HomeOrder")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("SeoAlias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeoDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeoKeywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeoPageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Áo nam",
                            SeoAlias = "ao-nam",
                            SortOrder = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Áo nữ",
                            SeoAlias = "ao-nu",
                            SortOrder = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Giày nam",
                            SeoAlias = "giay-nam",
                            SortOrder = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Giày nữ",
                            SeoAlias = "giay-nu",
                            SortOrder = 4,
                            Status = 1
                        });
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<bool>("Selected")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.ProductQuantity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("ProductQuantities");
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.ProductTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("TagId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TagId");

                    b.ToTable("ProductTags");
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<double>("OriginPrice")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("SalePrice")
                        .HasColumnType("float");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "XXL"
                        },
                        new
                        {
                            Id = 2,
                            Name = "XL"
                        },
                        new
                        {
                            Id = 3,
                            Name = "L"
                        },
                        new
                        {
                            Id = 4,
                            Name = "M"
                        },
                        new
                        {
                            Id = 5,
                            Name = "S"
                        },
                        new
                        {
                            Id = 6,
                            Name = "XS"
                        });
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.Slide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("GroupAlias")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Slides");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayOrder = 0,
                            GroupAlias = "top",
                            Image = "/client-side/images/slider/slide-1.jpg",
                            Name = "Slide 1",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = 2,
                            DisplayOrder = 1,
                            GroupAlias = "top",
                            Image = "/client-side/images/slider/slide-2.jpg",
                            Name = "Slide 2",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = 3,
                            DisplayOrder = 2,
                            GroupAlias = "top",
                            Image = "/client-side/images/slider/slide-3.jpg",
                            Name = "Slide 3",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = 4,
                            DisplayOrder = 1,
                            GroupAlias = "brand",
                            Image = "/client-side/images/brand1.png",
                            Name = "Slide 1",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = 5,
                            DisplayOrder = 2,
                            GroupAlias = "brand",
                            Image = "/client-side/images/brand2.png",
                            Name = "Slide 2",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = 6,
                            DisplayOrder = 3,
                            GroupAlias = "brand",
                            Image = "/client-side/images/brand3.png",
                            Name = "Slide 3",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = 7,
                            DisplayOrder = 4,
                            GroupAlias = "brand",
                            Image = "/client-side/images/brand4.png",
                            Name = "Slide 4",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = 8,
                            DisplayOrder = 5,
                            GroupAlias = "brand",
                            Image = "/client-side/images/brand5.png",
                            Name = "Slide 5",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = 9,
                            DisplayOrder = 6,
                            GroupAlias = "brand",
                            Image = "/client-side/images/brand6.png",
                            Name = "Slide 6",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = 10,
                            DisplayOrder = 7,
                            GroupAlias = "brand",
                            Image = "/client-side/images/brand7.png",
                            Name = "Slide 7",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = 11,
                            DisplayOrder = 8,
                            GroupAlias = "brand",
                            Image = "/client-side/images/brand8.png",
                            Name = "Slide 8",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = 12,
                            DisplayOrder = 9,
                            GroupAlias = "brand",
                            Image = "/client-side/images/brand9.png",
                            Name = "Slide 9",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = 13,
                            DisplayOrder = 10,
                            GroupAlias = "brand",
                            Image = "/client-side/images/brand10.png",
                            Name = "Slide 10",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = 14,
                            DisplayOrder = 11,
                            GroupAlias = "brand",
                            Image = "/client-side/images/brand11.png",
                            Name = "Slide 11",
                            Status = true,
                            Url = "#"
                        });
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.SystemConfig", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Value1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Value2")
                        .HasColumnType("int");

                    b.Property<bool?>("Value3")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Value4")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Value5")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("SystemConfigs");

                    b.HasData(
                        new
                        {
                            Id = "HomeTitle",
                            Name = "Tiêu đề trang chủ",
                            Status = 1,
                            Value1 = "Trang chủ TeduShop"
                        },
                        new
                        {
                            Id = "HomeMetaKeyword",
                            Name = "Từ khoá trang chủ",
                            Status = 1,
                            Value1 = "Trang chủ TeduShop"
                        },
                        new
                        {
                            Id = "HomeMetaDescription",
                            Name = "Mô tả trang chủ",
                            Status = 1,
                            Value1 = "Trang chủ TeduShop"
                        });
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.Systems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descaription")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ImageCover")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<float>("Lat")
                        .HasColumnType("real");

                    b.Property<string>("LinkFaceBook")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkInstargram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Lng")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWebsite")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Node")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PhongNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Systems");
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.WholePrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FromQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ToQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("WholePrices");
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.Advertistment", b =>
                {
                    b.HasOne("WebAspCore.Data.Entities.AdvertistmentPosition", "AdvertistmentPosition")
                        .WithMany("Advertistments")
                        .HasForeignKey("PositionId");
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.AdvertistmentPosition", b =>
                {
                    b.HasOne("WebAspCore.Data.Entities.AdvertistmentPage", "AdvertistmentPage")
                        .WithMany("AdvertistmentPositions")
                        .HasForeignKey("PageId");
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.Announcement", b =>
                {
                    b.HasOne("WebAspCore.Data.Entities.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.AnnouncementUser", b =>
                {
                    b.HasOne("WebAspCore.Data.Entities.Announcement", "Announcement")
                        .WithMany("AnnouncementUsers")
                        .HasForeignKey("AnnouncementId");
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.Bill", b =>
                {
                    b.HasOne("WebAspCore.Data.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.BillDetail", b =>
                {
                    b.HasOne("WebAspCore.Data.Entities.Bill", "Bill")
                        .WithMany("BillDetails")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAspCore.Data.Entities.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAspCore.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAspCore.Data.Entities.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.BlogTag", b =>
                {
                    b.HasOne("WebAspCore.Data.Entities.Blog", "Blog")
                        .WithMany("BlogTags")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAspCore.Data.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.Permission", b =>
                {
                    b.HasOne("WebAspCore.Data.Entities.Function", "Function")
                        .WithMany()
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAspCore.Data.Entities.AppRole", "AppRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.Product", b =>
                {
                    b.HasOne("WebAspCore.Data.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.ProductImage", b =>
                {
                    b.HasOne("WebAspCore.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.ProductQuantity", b =>
                {
                    b.HasOne("WebAspCore.Data.Entities.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAspCore.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAspCore.Data.Entities.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.ProductTag", b =>
                {
                    b.HasOne("WebAspCore.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAspCore.Data.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId");
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.ProductType", b =>
                {
                    b.HasOne("WebAspCore.Data.Entities.Product", "Product")
                        .WithMany("ProductTypes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAspCore.Data.Entities.WholePrice", b =>
                {
                    b.HasOne("WebAspCore.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
